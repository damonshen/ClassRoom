// Generated by LiveScript 1.3.1
(function(){
  var socket;
  socket = function(app){
    var io, connectedUsers, completedUsers, selectedUsers;
    io = require('socket.io')(app);
    connectedUsers = [];
    completedUsers = [];
    selectedUsers = {};
    return io.on('connection', function(socket){
      var getSelectionCount, sendRefreshReq, removeFromCompletedUsers, removeFromSelectedUsers;
      console.log(io.sockets.sockets.length + ' users');
      connectedUsers.push(socket.id);
      getSelectionCount = function(){
        var count, k, ref$, v;
        count = {
          a: 0,
          b: 0,
          c: 0,
          d: 0
        };
        for (k in ref$ = selectedUsers) {
          v = ref$[k];
          count[v]++;
        }
        return count;
      };
      sendRefreshReq = function(){
        var response;
        response = {};
        response['completionCount'] = completedUsers.length + '/' + connectedUsers.length;
        response['selectionCount'] = getSelectionCount();
        console.log(getSelectionCount());
        return io.emit('refresh', response);
      };
      removeFromCompletedUsers = function(id){
        var index;
        if ((index = completedUsers.indexOf(id)) > -1) {
          completedUsers.splice(index, 1);
        }
        return console.log(completedUsers);
      };
      removeFromSelectedUsers = function(id){
        return delete selectedUsers[id];
      };
      sendRefreshReq();
      socket.on('completion', function(userName){
        var index;
        console.log(completedUsers);
        if (in$(socket.id, completedUsers)) {
          index = completedUsers.indexOf(socket.id);
          completedUsers.splice(index, 1);
          console.log('already complete');
        } else {
          completedUsers.push(socket.id);
          console.log('completion');
        }
        return sendRefreshReq();
      });
      socket.on('selection', function(userAnswer){
        var user;
        for (user in userAnswer) {
          selectedUsers[socket.id] = userAnswer[user];
        }
        console.log(selectedUsers);
        console.log(socket.id);
        return sendRefreshReq();
      });
      socket.on('reset', function(data){
        io.emit('reset');
        completedUsers = [];
        selectedUsers = {};
        return sendRefreshReq();
      });
      return socket.on('disconnect', function(){
        var index;
        index = connectedUsers.indexOf(socket.id);
        connectedUsers.splice(index, 1);
        removeFromCompletedUsers(socket.id);
        removeFromSelectedUsers(socket.id);
        sendRefreshReq();
        return console.log('disconnect');
      });
    });
  };
  module.exports = socket;
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
